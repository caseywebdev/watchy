#!/usr/bin/env node

var log = require('orgsync-logger');
var Pheonix = require('../lib/pheonix');
var _ = require('underscore');
var argv = require('commander');
var chokidar = require('chokidar');
var path = require('path');

argv
  .version(require('../package').version)
  .usage('[options] -- command arg1 arg2...')
  .option(
    '-w, --watch [paths]',
    'rerun the command when [paths] change',
    function (str) { return str.split(','); }
  )
  .option(
    '-i, --ignore [regex] [default /\\.]',
    'ignore changes to paths matching [regex]',
    function (str) { return new RegExp(str); },
    '/\\.'
  )
  .option('-k, --keep-alive', 'restart on exit, useful for servers')
  .option('-W, --wait [sec]', 'time after SIGTERM to SIGKILL', parseFloat)
  .option('-s, --silent', 'be quieter, only output errors')
  .option('-n, --no-color', 'disable colored output')
  .option('-S, --no-init-spawn', 'prevent spawn when the watcher is created')
  .option(
    '-r, --restart [string] [default rs]',
    'enter this command to manually restart the process. Set to - to disable.',
    'rs'
  )
  .option('-p, --use-polling', 'slower, but useful when watching over NFS')
  .parse(process.argv);

var command = log.config.name = _.first(argv.args);
log.config.colors = argv.color;
if (argv.silent) log.config.level = 'error';
if (!command) {
  process.stderr.write(argv.helpInformation());
  log.config.name = 'watchy';
  log.error('Please specify a command.');
  process.exit(1);
}
var options = _.extend(
  {log: log},
  _.pick(argv, 'wait', 'restart', 'keepAlive', 'initSpawn')
);
var pheonix = new Pheonix(command, _.rest(argv.args), options);

// Start watching if paths are specified.
if (argv.watch) {
  var watcher = chokidar
    .watch(_.map(argv.watch, function (p) { return path.resolve(p); }), {
      ignored: new RegExp(argv.ignore),
      ignoreInitial: true,
      persistent: true,
      usePolling: argv.usePolling
    })
    .on('all', _.bind(pheonix.spawn, pheonix));

  process.on('SIGTERM', _.bind(watcher.close, watcher));
}

process.on('SIGTERM', _.bind(pheonix.kill, pheonix, true));
