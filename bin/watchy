#!/usr/bin/env node

// Handle command line options.
var _ = require('underscore');
var Log = require('../lib/log');
var optimist = require('optimist');
var path = require('path');
var Pheonix = require('../lib/pheonix');
var chokidar = require('chokidar');

var argv = optimist
  .usage('Usage: $0 [-w paths,to,watch] -- command arg1 arg2...')
  .options({
    watch: {
      alias: 'w',
      type: 'string',
      desc: 'A path or comma-separated paths to watch.'
    },
    ignore: {
      alias: 'i',
      default: '/\\.',
      type: 'string',
      desc: 'A regex of file paths to ignore.'
    },
    'keep-alive': {
      alias: 'k',
      default: false,
      type: 'boolean',
      desc: 'Restart the process if it exits. Useful for servers.'
    },
    wait: {
      alias: 'W',
      type: 'number',
      desc: 'Time (sec) to wait after sending SIGTERM to forcefully SIGKILL.'
    },
    silent: {
      alias: 's',
      type: 'boolean',
      desc: 'Silence watching info, errors will still output to stderr.',
      default: false
    },
    'no-color': {
      alias: 'n',
      type: 'boolean',
      desc: 'Do not color output.',
      default: false
    },
    version: {
      alias: 'v',
      type: 'boolean',
      desc: 'Display the version.'
    }
  }).argv;

var log = new Log(argv, _.pick(argv, 'silent'));
require('chalk').enabled = !argv['no-color'];
if (argv.version) {
  return log.info('Version', require('../package').version, 'info');
} else if (!argv._[0]) {
  optimist.showHelp();
  log.error('Whoops!', 'Please specify a command.');
  return process.exit(1);
}
var options = _.extend({log: log}, _.pick(argv, 'wait'));
if (argv['keep-alive']) options.keepAlive = true;
var pheonix = new Pheonix(argv._.join(' '), options);

// Start watching if paths are specified.
if (argv.watch) {
  var watcher = chokidar
    .watch(_.map(argv.watch.split(','), function (p) {
      return path.resolve(p);
    }), {
      ignored: new RegExp(argv.ignore),
      ignoreInitial: true,
      persistent: true
    })
    .on('all', _.bind(pheonix.spawn, pheonix));
  process.on('SIGTERM', _.bind(watcher.close, watcher));
}

process.on('SIGTERM', _.bind(pheonix.kill, pheonix, true));
