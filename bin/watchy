#!/usr/bin/env node

// Handle command line options.
var _ = require('underscore');
var Log = require('../lib/log');
var optimist = require('optimist');
var Pheonix = require('../lib/pheonix');
var watchr = require('watchr');

var argv = optimist
  .usage('Usage: $0 [-w paths,to,watch] -- command arg1 arg2...')
  .options({
    watch: {
      alias: 'w',
      type: 'string',
      desc: 'A path or comma-separated paths to watch.'
    },
    'ignore-paths': {
      alias: 'i',
      type: 'string',
      desc: 'A path or comma-separated paths to ignore.'
    },
    'ignore-basenames': {
      alias: 'I',
      type: 'string',
      desc: 'A basename regex to ignore (ie \\.css$).'
    },
    verbose: {
      alias: 'v',
      default: false,
      type: 'boolean',
      desc: 'Log process starts and error exits in stdout.'
    },
    growl: {
      alias: 'g',
      default: false,
      type: 'boolean',
      desc: 'Use growl notifications for process starts and error exits.'
    },
    'keep-alive': {
      alias: 'k',
      default: false,
      type: 'boolean',
      desc: 'Restart the process if it exits. Useful for servers.'
    },
    wait: {
      alias: 'W',
      default: 0,
      type: 'number',
      desc: 'Time (sec) to wait after sending SIGTERM to forcefully SIGKILL.'
    }
  })
  .check(function () {
    if (!optimist.argv._[0]) throw new Error('Please specify a command.');
  })
  .argv;

var log = new Log(argv, _.pick(argv, 'verbose', 'growl'));
var command = argv._[0];
var args = argv._.slice(1);
var options = _.extend({log: log}, _.pick(argv, 'keep-alive', 'wait'));
var pheonix = new Pheonix(command, args, options);

// Start watching if paths are specified.
if (argv.watch) {
  watchr.watch({
    paths: argv.watch.split(','),
    ignorePaths: argv['ignore-paths'] && argv['ignore-paths'].split(','),
    ignoreCustomPatterns: argv['ignore-basenames'] &&
      new RegExp(argv['ignore-basenames'], 'i'),
    listener: _.bind(pheonix.spawn, pheonix),
    next: function (er, watchers) {
      if (er) throw er;
      process.on('SIGTERM', _.bind(_.invoke, _, watchers, 'close'));
    }
  });
}

process.on('SIGTERM', _.bind(pheonix.killDead, pheonix));
